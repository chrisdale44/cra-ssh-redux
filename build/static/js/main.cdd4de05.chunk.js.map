{"version":3,"sources":["store/tags/selectors.js","store/tags/actions.js","store/tags/constants.js","store/tags/index.js","store/photos/selectors.js","store/photos/index.js","store/photos/constants.js","App.js","serviceWorker.js","store/configureStore.js","index.js","store/filters/constants.js","store/filters/selectors.js","store/filters/actions.js","store/filters/index.js","helpers/parseForTags.js","helpers/getAllUniqueValuesOf.js","helpers/parseForFilterOptions.js","helpers/index.js"],"names":["getAllTags","state","tags","getAllSelectedTags","reduce","acc","tag","isSelected","push","id","toggleTagSelected","tagId","dispatch","type","__webpack_require__","d","__webpack_exports__","actions_toggleTagSelected","initialState","arguments","length","undefined","action","FETCH_PHOTOS_SUCCESS","parseForTags","payload","photos","map","Object","assign","getAllPhotos","getPhoto","props","filter","photo","createSelector","album","medium","subject","error","objectSpread","AsyncComponent","Loadable","loader","Promise","all","e","then","bind","loading","react_default","a","createElement","modules","App","style","display","Component","Boolean","window","location","hostname","match","createStoreWithMiddleware","composeWithDevTools","applyMiddleware","ReduxThunk","createStore","rootReducer","combineReducers","photosReducer","tagsReducer","filters","filtersReducer","devStore","store","configureStore","REDUX_STATE","AppBundle","es","src_App","onload","preloadReady","ReactDOM","hydrate","document","getElementById","navigator","serviceWorker","ready","registration","unregister","FILTER_IDS","getAllFilterOptions","getAllSelectedFilters","options","selectedOption","option","toggleSelectedFilter","title","parseForFilterOptions","concat","a2","o","isEnabled","getAllUniqueValuesOf","values","i","context","custom","val","indexOf","filterOptions","helpers_parseForTags","helpers_getAllUniqueValuesOf","helpers_parseForFilterOptions"],"mappings":"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","file":"static/js/main.cdd4de05.chunk.js","sourcesContent":["export const getAllTags = state => state.tags;\n\nexport const getTag = (state, props) =>\n  state.tags.filter(tag => tag.id === props.id);\n\nexport const getAllSelectedTags = state => {\n  return state.tags.reduce((acc, tag) => {\n    if (tag.isSelected) {\n      acc.push(tag.id);\n    }\n    return acc;\n  }, []);\n};\n\n// export const isTagSelected = createSelector(\n//   getTag,\n//   tag => tag && tag.isSelected\n// );\n\n// export const isTagEnabled = createSelector(getTag, tag => tag && tag.isEnabled);\n","import { TOGGLE_TAG_SELECTED, TOGGLE_TAG_ENABLED } from \"./constants\";\n\nexport const toggleTagSelected = tagId => dispatch => {\n  dispatch({\n    type: TOGGLE_TAG_SELECTED,\n    id: tagId\n  });\n};\n\nexport const toggleTagEnabled = tagId => dispatch => {\n  dispatch({\n    type: TOGGLE_TAG_ENABLED,\n    payload: tagId\n  });\n};\n","export const TOGGLE_TAG_SELECTED = \"TOGGLE_TAG_SELECTED\";\nexport const TOGGLE_TAG_ENABLED = \"TOGGLE_TAG_ENABLED\";\nexport const FETCH_TAGS = \"FETCH_TAGS\";\n","import { FETCH_PHOTOS_SUCCESS } from \"../photos/constants\";\nimport { parseForTags } from \"../../helpers\";\nimport { TOGGLE_TAG_SELECTED, TOGGLE_TAG_ENABLED } from \"./constants\";\nexport { getAllTags, getTag, getAllSelectedTags } from \"./selectors\";\nexport { toggleTagSelected, toggleTagEnabled } from \"./actions\";\n\nconst initialState = [];\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case FETCH_PHOTOS_SUCCESS:\n      return parseForTags(action.payload.photos);\n    case TOGGLE_TAG_SELECTED:\n      return state.map(tag => {\n        if (tag.id !== action.id) {\n          return tag;\n        }\n\n        return Object.assign({}, tag, {\n          isSelected: !tag.isSelected\n        });\n      });\n    case TOGGLE_TAG_ENABLED:\n      return state;\n    default:\n      return state;\n  }\n};\n","import { createSelector } from \"reselect\";\n\nexport const getAllPhotos = state => state.photos.photos;\n\nexport const getPhoto = (state, props) =>\n  state.photos.photos.filter(photo => photo.id === props.id);\n\nexport const getPhotoTags = createSelector(\n  getPhoto,\n  photo => photo && photo.tags\n);\n\nexport const getPhotoAlbum = createSelector(\n  getPhoto,\n  photo => photo && photo.album\n);\n\nexport const getPhotoMedium = createSelector(\n  getPhoto,\n  photo => photo && photo.medium\n);\n\nexport const getPhotoSubject = createSelector(\n  getPhoto,\n  photo => photo && photo.subject\n);\n","import { FETCH_PHOTOS_SUCCESS } from \"./constants\";\n\nexport {\n  getAllPhotos,\n  getPhoto,\n  getPhotoTags,\n  getPhotoAlbum,\n  getPhotoMedium,\n  getPhotoSubject\n} from \"./selectors\";\nexport { fetchAllPhotos } from \"./actions\";\n\nconst initialState = {\n  photos: [],\n  error: null\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case FETCH_PHOTOS_SUCCESS:\n      return {\n        ...state,\n        photos: action.payload.photos\n      };\n    default:\n      return state;\n  }\n};\n","export const FETCH_PHOTOS_SUCCESS = \"FETCH_PHOTOS_SUCCESS\";\n","import React, { Component } from \"react\";\nimport Loadable from \"react-loadable\";\n\nconst AsyncComponent = Loadable({\n  loader: () =>\n    import(/* webpackChunkName: \"photography\" */ \"./pages/Photography\"),\n  loading: () => <div>loading...</div>,\n  modules: [\"photography\"]\n});\n\nclass App extends Component {\n  render() {\n    return (\n      <div style={{ display: \"flex\" }}>\n        <AsyncComponent />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport ReduxThunk from \"redux-thunk\";\nimport photosReducer from \"./photos\";\nimport tagsReducer from \"./tags\";\nimport filtersReducer from \"./filters\";\n\nconst createStoreWithMiddleware = composeWithDevTools(\n  applyMiddleware(ReduxThunk)\n)(createStore);\n\nconst rootReducer = combineReducers({\n  photos: photosReducer,\n  tags: tagsReducer,\n  filters: filtersReducer\n});\n\nexport default function configureStore(initialState = {}) {\n  return createStoreWithMiddleware(rootReducer, initialState);\n}\n","import \"@babel/polyfill\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Loadable from \"react-loadable\";\nimport { Provider as ReduxProvider } from \"react-redux\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport configureStore from \"./store/configureStore\";\nimport dummyStore from \"./dummyStore.json\";\n\nconst devStore = process.env.NODE_ENV === \"development\" ? dummyStore : {};\nconst store = configureStore(window.REDUX_STATE || devStore || {});\n\nconst AppBundle = (\n  <ReduxProvider store={store}>\n    <App />\n  </ReduxProvider>\n);\n\nwindow.onload = () => {\n  Loadable.preloadReady().then(() => {\n    ReactDOM.hydrate(AppBundle, document.getElementById(\"root\"));\n  });\n};\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const FILTER_IDS = [\"category\", \"medium\", \"subject\", \"location\"];\nexport const TOGGLE_SELECTED_FILTER = \"TOGGLE_SELECTED_FILTER\";\n","export const getAllFilterOptions = state => state.filters;\n\nexport const getFilter = (state, id) => {\n  return state.filters.filter(filter => filter.id === id);\n};\n\nexport const getAllSelectedFilters = state => {\n  return state.filters.reduce((acc, filter) => {\n    if (filter && filter.options.length) {\n      const selectedOption = filter.options.filter(\n        option => option.isSelected === true\n      );\n\n      if (selectedOption.length) {\n        acc[filter.id] = selectedOption[0].id;\n      }\n    }\n    return acc;\n  }, {});\n};\n","import { TOGGLE_SELECTED_FILTER } from \"./constants\";\n\nexport const toggleSelectedFilter = (title, option) => dispatch => {\n  dispatch({\n    type: TOGGLE_SELECTED_FILTER,\n    title: title,\n    option: option\n  });\n};\n","import { FETCH_PHOTOS_SUCCESS } from \"../photos/constants\";\nimport { parseForFilterOptions } from \"../../helpers\";\nimport { TOGGLE_SELECTED_FILTER } from \"./constants\";\nexport { FILTER_IDS, TOGGLE_SELECTED_FILTER } from \"./constants\";\nexport { getAllFilterOptions, getAllSelectedFilters } from \"./selectors\";\nexport { toggleSelectedFilter } from \"./actions\";\n\nconst initialState = [];\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case FETCH_PHOTOS_SUCCESS:\n      return parseForFilterOptions(action.payload.photos);\n    case TOGGLE_SELECTED_FILTER:\n      return state.map(filter => {\n        if (filter.id !== action.title) {\n          return filter;\n        }\n\n        return {\n          ...filter,\n          options: filter.options.map(option => {\n            if (option.id !== action.option) {\n              return Object.assign({}, option, {\n                isSelected: false\n              });\n            }\n\n            return Object.assign({}, option, {\n              isSelected: !option.isSelected\n            });\n          })\n        };\n      });\n    default:\n      return state;\n  }\n};\n","const parseForTags = photos => {\n  if (!photos) {\n    return;\n  }\n\n  return photos.reduce((a, photo) => {\n    return a.concat(\n      photo.tags.reduce((a2, tag) => {\n        if (tag && (!a.length || a.filter(o => o.id === tag).length === 0)) {\n          a2.push({\n            id: tag,\n            isEnabled: true,\n            isSelected: false\n          });\n        }\n\n        return a2;\n      }, [])\n    );\n  }, []);\n};\n\nexport default parseForTags;\n","const getAllUniqueValuesOf = (photos, id) => {\n  let values = [];\n  for (let i = 0; i < photos.length; i++) {\n    const photo = photos[i];\n    if (!photo.context || !photo.context.custom || !photo.context.custom[id]) {\n      continue;\n    }\n\n    const val = photo.context.custom[id];\n    if (values.indexOf(val) === -1) {\n      values.push(val);\n    }\n  }\n  return values;\n};\n\nexport default getAllUniqueValuesOf;\n","import { FILTER_IDS } from \"../store/filters\";\nimport { getAllUniqueValuesOf } from \".\";\n\nconst parseForFilterOptions = photos => {\n  const filterOptions = [];\n\n  FILTER_IDS.map(id => {\n    const options = getAllUniqueValuesOf(photos, id);\n    return filterOptions.push({\n      id,\n      options: options.map(option => {\n        return {\n          id: option,\n          isSelected: false\n        };\n      })\n    });\n  });\n\n  return filterOptions;\n};\n\nexport default parseForFilterOptions;\n","export { default as parseForTags } from \"./parseForTags\";\nexport { default as getEnabledTags } from \"./getEnabledTags\";\nexport { default as getTaggedPhotos } from \"./getTaggedPhotos\";\nexport { default as getAllUniqueValuesOf } from \"./getAllUniqueValuesOf\";\nexport { default as getFilteredPhotos } from \"./getFilteredPhotos\";\nexport { default as parseForFilterOptions } from \"./parseForFilterOptions\";\n"],"sourceRoot":""}