{"version":3,"sources":["store/photos/constants.js","store/tags/selectors.js","store/tags/actions.js","store/tags/constants.js","store/tags/index.js","App.js","serviceWorker.js","store/configureStore.js","index.js","store/photos/selectors.js","store/photos/actions.js","store/photos/index.js","store/filters/constants.js","store/filters/selectors.js","store/filters/actions.js","store/filters/index.js","helpers/parseForTags.js","helpers/getAllUniqueValuesOf.js","helpers/parseForFilterOptions.js","helpers/index.js"],"names":["__webpack_require__","d","__webpack_exports__","FETCH_PHOTOS_SUCCESS","SET_OPEN_PHOTO","CLOSE_OPEN_PHOTO","getAllTags","state","tags","getAllSelectedTags","reduce","acc","tag","isSelected","push","id","toggleTagSelected","tagId","dispatch","getState","type","photos","getAllPhotos","initialState","arguments","length","undefined","action","parseForTags","payload","map","Object","assign","selectedTags","includes","objectSpread","isEnabled","find","photo","every","t","AsyncComponent","Loadable","loader","Promise","all","e","then","bind","loading","react_default","a","createElement","modules","App","style","display","Component","Boolean","window","location","hostname","match","createStoreWithMiddleware","composeWithDevTools","applyMiddleware","ReduxThunk","createStore","rootReducer","combineReducers","photosReducer","tagsReducer","filters","filtersReducer","devStore","store","configureStore","REDUX_STATE","AppBundle","es","src_App","onload","preloadReady","ReactDOM","hydrate","document","getElementById","navigator","serviceWorker","ready","registration","unregister","getPhoto","props","filter","getOpenPhoto","createSelector","album","medium","subject","openPhoto","setOpenPhoto","public_id","url","closeOpenPhoto","error","FILTER_IDS","getAllFilterOptions","getAllSelectedFilters","options","selectedOption","option","toggleSelectedFilter","title","parseForFilterOptions","concat","a2","o","getAllUniqueValuesOf","values","i","context","custom","val","indexOf","filterOptions","helpers_parseForTags","helpers_getAllUniqueValuesOf","helpers_parseForFilterOptions"],"mappings":"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","file":"static/js/main.00a591c4.chunk.js","sourcesContent":["export const FETCH_PHOTOS_SUCCESS = \"FETCH_PHOTOS_SUCCESS\";\nexport const SET_OPEN_PHOTO = \"SET_OPEN_PHOTO\";\nexport const CLOSE_OPEN_PHOTO = \"CLOSE_OPEN_PHOTO\";\n","export const getAllTags = state => state.tags;\n\nexport const getTag = (state, props) =>\n  state.tags.filter(tag => tag.id === props.id);\n\nexport const getAllSelectedTags = tags => {\n  return tags.reduce((acc, tag) => {\n    if (tag.isSelected) {\n      acc.push(tag.id);\n    }\n    return acc;\n  }, []);\n};\n\n// export const isTagSelected = createSelector(\n//   getTag,\n//   tag => tag && tag.isSelected\n// );\n\n// export const isTagEnabled = createSelector(getTag, tag => tag && tag.isEnabled);\n","import { TOGGLE_TAG_SELECTED, TOGGLE_ENABLED_TAGS } from \"./constants\";\nimport { getAllPhotos } from \"../photos\";\n\nexport const toggleTagSelected = tagId => (dispatch, getState) => {\n  dispatch({\n    type: TOGGLE_TAG_SELECTED,\n    id: tagId\n  });\n  const photos = getAllPhotos(getState());\n  dispatch({ type: TOGGLE_ENABLED_TAGS, photos });\n};\n","export const TOGGLE_TAG_SELECTED = \"TOGGLE_TAG_SELECTED\";\nexport const TOGGLE_ENABLED_TAGS = \"TOGGLE_TAG_ENABLED\";\nexport const FETCH_TAGS = \"FETCH_TAGS\";\n","import { parseForTags } from \"../../helpers\";\nimport { FETCH_PHOTOS_SUCCESS } from \"../photos\";\nimport { TOGGLE_TAG_SELECTED, TOGGLE_ENABLED_TAGS } from \"./constants\";\nimport { getAllSelectedTags } from \"./selectors\";\nexport { getAllTags, getTag, getAllSelectedTags } from \"./selectors\";\nexport { toggleTagSelected } from \"./actions\";\n\nconst initialState = [];\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case FETCH_PHOTOS_SUCCESS:\n      return parseForTags(action.payload.photos);\n    case TOGGLE_TAG_SELECTED:\n      return state.map(tag => {\n        if (tag.id !== action.id) {\n          return tag;\n        }\n\n        return Object.assign({}, tag, {\n          isSelected: !tag.isSelected\n        });\n      });\n    case TOGGLE_ENABLED_TAGS:\n      const selectedTags = getAllSelectedTags(state);\n      const result = state.map(tag => {\n        if (!selectedTags.length || selectedTags.includes(tag.id)) {\n          return { ...tag, isEnabled: true };\n        }\n        if (\n          action.photos.find(\n            photo =>\n              photo.tags.includes(tag.id) &&\n              selectedTags.every(t => photo.tags.includes(t))\n          )\n        ) {\n          return { ...tag, isEnabled: true };\n        }\n        return { ...tag, isEnabled: false };\n      });\n      return result;\n    default:\n      return state;\n  }\n};\n","import React, { Component } from \"react\";\nimport Loadable from \"react-loadable\";\n\nconst AsyncComponent = Loadable({\n  loader: () =>\n    import(/* webpackChunkName: \"photography\" */ \"./pages/Photography\"),\n  loading: () => <div>loading...</div>,\n  modules: [\"photography\"]\n});\n\nclass App extends Component {\n  render() {\n    return (\n      <div style={{ display: \"flex\" }}>\n        <AsyncComponent />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport ReduxThunk from \"redux-thunk\";\nimport photosReducer from \"./photos\";\nimport tagsReducer from \"./tags\";\nimport filtersReducer from \"./filters\";\n\nconst createStoreWithMiddleware = composeWithDevTools(\n  applyMiddleware(ReduxThunk)\n)(createStore);\n\nconst rootReducer = combineReducers({\n  photos: photosReducer,\n  tags: tagsReducer,\n  filters: filtersReducer\n});\n\nexport default function configureStore(initialState = {}) {\n  return createStoreWithMiddleware(rootReducer, initialState);\n}\n","import \"@babel/polyfill\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Loadable from \"react-loadable\";\nimport { Provider as ReduxProvider } from \"react-redux\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport configureStore from \"./store/configureStore\";\nimport dummyStore from \"./dummyStore.json\";\n\nconst devStore = process.env.NODE_ENV === \"development\" ? dummyStore : {};\nconst store = configureStore(window.REDUX_STATE || devStore || {});\n\nconst AppBundle = (\n  <ReduxProvider store={store}>\n    <App />\n  </ReduxProvider>\n);\n\nwindow.onload = () => {\n  Loadable.preloadReady().then(() => {\n    ReactDOM.hydrate(AppBundle, document.getElementById(\"root\"));\n  });\n};\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createSelector } from \"reselect\";\n\nexport const getAllPhotos = state => state.photos.photos;\n\nexport const getPhoto = (state, props) =>\n  state.photos.photos.filter(photo => photo.id === props.id);\n\nexport const getPhotoTags = createSelector(\n  getPhoto,\n  photo => photo && photo.tags\n);\n\nexport const getPhotoAlbum = createSelector(\n  getPhoto,\n  photo => photo && photo.album\n);\n\nexport const getPhotoMedium = createSelector(\n  getPhoto,\n  photo => photo && photo.medium\n);\n\nexport const getPhotoSubject = createSelector(\n  getPhoto,\n  photo => photo && photo.subject\n);\n\nexport const getOpenPhoto = state => state.photos.openPhoto;\n","import axios from \"axios\";\nimport {\n  FETCH_PHOTOS_SUCCESS,\n  SET_OPEN_PHOTO,\n  CLOSE_OPEN_PHOTO\n} from \"./constants\";\n\nexport const fetchAllPhotos = url => dispatch => {\n  console.log(\"Fetch: \", url);\n  let photos = [];\n\n  const fetchPhotos = url =>\n    axios\n      .get(url)\n      .then(handleErrors)\n      .then(({ data }) => {\n        photos = photos.concat(data.resources);\n        if (data.next_cursor) {\n          const urlParams = new URLSearchParams(url);\n          urlParams.set(\"next_cursor\", data.next_cursor);\n          return fetchPhotos(decodeURIComponent(urlParams.toString()));\n        } else {\n          dispatch(fetchPhotosSuccess(photos));\n          return photos;\n        }\n      })\n      .catch(error => {\n        console.log(\"Failed to fetch photos\", error);\n      });\n\n  return fetchPhotos(url);\n};\n\nconst handleErrors = response => {\n  if (!responseOk(response.status)) {\n    throw Error(`${response.status}: ${response.statusText}`);\n  }\n  return response;\n};\n\nconst responseOk = n => (n >= 200 && n < 300 ? true : false);\n\nconst fetchPhotosSuccess = photos => ({\n  type: FETCH_PHOTOS_SUCCESS,\n  payload: { photos }\n});\n\nexport const setOpenPhoto = (public_id, url) => dispatch => {\n  dispatch({\n    type: SET_OPEN_PHOTO,\n    public_id,\n    url\n  });\n};\n\nexport const closeOpenPhoto = () => dispatch => {\n  dispatch({\n    type: CLOSE_OPEN_PHOTO\n  });\n};\n","import {\n  FETCH_PHOTOS_SUCCESS,\n  SET_OPEN_PHOTO,\n  CLOSE_OPEN_PHOTO\n} from \"./constants\";\nexport {\n  FETCH_PHOTOS_SUCCESS,\n  SET_OPEN_PHOTO,\n  CLOSE_OPEN_PHOTO\n} from \"./constants\";\n\nexport {\n  getAllPhotos,\n  getPhoto,\n  getPhotoTags,\n  getPhotoAlbum,\n  getPhotoMedium,\n  getPhotoSubject,\n  getOpenPhoto\n} from \"./selectors\";\nexport { fetchAllPhotos, setOpenPhoto, closeOpenPhoto } from \"./actions\";\n\nconst initialState = {\n  photos: [],\n  openPhoto: {},\n  error: null\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case FETCH_PHOTOS_SUCCESS:\n      return {\n        ...state,\n        photos: action.payload.photos\n      };\n    case SET_OPEN_PHOTO:\n      return {\n        ...state,\n        openPhoto: {\n          public_id: action.public_id,\n          url: action.url\n        }\n      };\n    case CLOSE_OPEN_PHOTO:\n      return {\n        ...state,\n        openPhoto: null\n      };\n    default:\n      return state;\n  }\n};\n","export const FILTER_IDS = [\"category\", \"medium\", \"subject\", \"location\"];\nexport const TOGGLE_SELECTED_FILTER = \"TOGGLE_SELECTED_FILTER\";\n","export const getAllFilterOptions = state => state.filters;\n\nexport const getFilter = (state, id) => {\n  return state.filters.filter(filter => filter.id === id);\n};\n\nexport const getAllSelectedFilters = state => {\n  return state.filters.reduce((acc, filter) => {\n    if (filter && filter.options.length) {\n      const selectedOption = filter.options.filter(\n        option => option.isSelected === true\n      );\n\n      if (selectedOption.length) {\n        acc[filter.id] = selectedOption[0].id;\n      }\n    }\n    return acc;\n  }, {});\n};\n","import { TOGGLE_SELECTED_FILTER } from \"./constants\";\n\nexport const toggleSelectedFilter = (title, option) => dispatch => {\n  dispatch({\n    type: TOGGLE_SELECTED_FILTER,\n    title,\n    option\n  });\n};\n","import { FETCH_PHOTOS_SUCCESS } from \"../photos/constants\";\nimport { parseForFilterOptions } from \"../../helpers\";\nimport { TOGGLE_SELECTED_FILTER } from \"./constants\";\nexport { FILTER_IDS, TOGGLE_SELECTED_FILTER } from \"./constants\";\nexport { getAllFilterOptions, getAllSelectedFilters } from \"./selectors\";\nexport { toggleSelectedFilter } from \"./actions\";\n\nconst initialState = [];\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case FETCH_PHOTOS_SUCCESS:\n      return parseForFilterOptions(action.payload.photos);\n    case TOGGLE_SELECTED_FILTER:\n      return state.map(filter => {\n        if (filter.id !== action.title) {\n          return filter;\n        }\n\n        return {\n          ...filter,\n          options: filter.options.map(option => {\n            if (option.id !== action.option) {\n              return Object.assign({}, option, {\n                isSelected: false\n              });\n            }\n\n            return Object.assign({}, option, {\n              isSelected: !option.isSelected\n            });\n          })\n        };\n      });\n    default:\n      return state;\n  }\n};\n","const parseForTags = photos => {\n  if (!photos) {\n    return;\n  }\n\n  return photos.reduce((a, photo) => {\n    return a.concat(\n      photo.tags.reduce((a2, tag) => {\n        if (tag && (!a.length || a.filter(o => o.id === tag).length === 0)) {\n          a2.push({\n            id: tag,\n            isEnabled: true,\n            isSelected: false\n          });\n        }\n\n        return a2;\n      }, [])\n    );\n  }, []);\n};\n\nexport default parseForTags;\n","const getAllUniqueValuesOf = (photos, id) => {\n  let values = [];\n  for (let i = 0; i < photos.length; i++) {\n    const photo = photos[i];\n    if (!photo.context || !photo.context.custom || !photo.context.custom[id]) {\n      continue;\n    }\n\n    const val = photo.context.custom[id];\n    if (values.indexOf(val) === -1) {\n      values.push(val);\n    }\n  }\n  return values;\n};\n\nexport default getAllUniqueValuesOf;\n","import { FILTER_IDS } from \"../store/filters\";\nimport { getAllUniqueValuesOf } from \".\";\n\nconst parseForFilterOptions = photos => {\n  const filterOptions = [];\n\n  FILTER_IDS.map(id => {\n    const options = getAllUniqueValuesOf(photos, id);\n    return filterOptions.push({\n      id,\n      options: options.map(option => {\n        return {\n          id: option,\n          isSelected: false\n        };\n      })\n    });\n  });\n\n  return filterOptions;\n};\n\nexport default parseForFilterOptions;\n","export { default as parseForTags } from \"./parseForTags\";\nexport { default as getEnabledTags } from \"./getEnabledTags\";\nexport { default as getTaggedPhotos } from \"./getTaggedPhotos\";\nexport { default as getAllUniqueValuesOf } from \"./getAllUniqueValuesOf\";\nexport { default as getFilteredPhotos } from \"./getFilteredPhotos\";\nexport { default as parseForFilterOptions } from \"./parseForFilterOptions\";\n"],"sourceRoot":""}